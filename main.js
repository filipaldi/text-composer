/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => TextComposerPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  defaultSetting: "default"
};
var TextComposerPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.addCommand({
      id: "compile-md-document",
      name: "Compile MD Document",
      callback: () => this.compileDocument()
    });
    this.addSettingTab(new TextComposerSettingTab(this.app, this));
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  async compileDocument() {
    const activeView = this.app.workspace.getActiveViewOfType(import_obsidian.MarkdownView);
    if (!activeView) {
      new Notice("No active markdown view found");
      return;
    }
    const editor = activeView.editor;
    const content = editor.getValue();
    const compiledContent = await this.replaceLinks(content);
    editor.setValue(compiledContent);
  }
  async replaceLinks(content) {
    const linkPattern = /!\[\[([^\]]+)\]\]/g;
    let match;
    let result = content;
    while ((match = linkPattern.exec(content)) !== null) {
      const linkedFile = match[1];
      const linkedFilePath = this.app.metadataCache.getFirstLinkpathDest(linkedFile, "");
      if (linkedFilePath) {
        const fileContent = await this.app.vault.read(linkedFilePath);
        const compiledContent = await this.replaceLinks(fileContent);
        result = result.replace(match[0], compiledContent);
      }
    }
    return result;
  }
};
var TextComposerSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Text Composer Settings" });
    new import_obsidian.Setting(containerEl).setName("Default Setting").setDesc("A default setting for the plugin").addText((text) => text.setPlaceholder("Enter your setting").setValue(this.plugin.settings.defaultSetting).onChange(async (value) => {
      this.plugin.settings.defaultSetting = value;
      await this.plugin.saveSettings();
    }));
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgQXBwLCBQbHVnaW4sIFBsdWdpblNldHRpbmdUYWIsIFNldHRpbmcsIE1hcmtkb3duVmlldyB9IGZyb20gJ29ic2lkaWFuJztcblxuaW50ZXJmYWNlIFRleHRDb21wb3NlclNldHRpbmdzIHtcblx0ZGVmYXVsdFNldHRpbmc6IHN0cmluZztcbn1cblxuY29uc3QgREVGQVVMVF9TRVRUSU5HUzogVGV4dENvbXBvc2VyU2V0dGluZ3MgPSB7XG5cdGRlZmF1bHRTZXR0aW5nOiAnZGVmYXVsdCdcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGV4dENvbXBvc2VyUGx1Z2luIGV4dGVuZHMgUGx1Z2luIHtcblx0c2V0dGluZ3M6IFRleHRDb21wb3NlclNldHRpbmdzO1xuXG5cdGFzeW5jIG9ubG9hZCgpIHtcblx0XHRhd2FpdCB0aGlzLmxvYWRTZXR0aW5ncygpO1xuXG5cdFx0Ly8gQWRkIGEgY29tbWFuZCB0byBjb21waWxlIHRoZSBkb2N1bWVudFxuXHRcdHRoaXMuYWRkQ29tbWFuZCh7XG5cdFx0XHRpZDogJ2NvbXBpbGUtbWQtZG9jdW1lbnQnLFxuXHRcdFx0bmFtZTogJ0NvbXBpbGUgTUQgRG9jdW1lbnQnLFxuXHRcdFx0Y2FsbGJhY2s6ICgpID0+IHRoaXMuY29tcGlsZURvY3VtZW50KClcblx0XHR9KTtcblxuXHRcdC8vIEFkZCBhIHNldHRpbmdzIHRhYlxuXHRcdHRoaXMuYWRkU2V0dGluZ1RhYihuZXcgVGV4dENvbXBvc2VyU2V0dGluZ1RhYih0aGlzLmFwcCwgdGhpcykpO1xuXHR9XG5cblx0b251bmxvYWQoKSB7fVxuXG5cdGFzeW5jIGxvYWRTZXR0aW5ncygpIHtcblx0XHR0aGlzLnNldHRpbmdzID0gT2JqZWN0LmFzc2lnbih7fSwgREVGQVVMVF9TRVRUSU5HUywgYXdhaXQgdGhpcy5sb2FkRGF0YSgpKTtcblx0fVxuXG5cdGFzeW5jIHNhdmVTZXR0aW5ncygpIHtcblx0XHRhd2FpdCB0aGlzLnNhdmVEYXRhKHRoaXMuc2V0dGluZ3MpO1xuXHR9XG5cblx0YXN5bmMgY29tcGlsZURvY3VtZW50KCkge1xuXHRcdGNvbnN0IGFjdGl2ZVZpZXcgPSB0aGlzLmFwcC53b3Jrc3BhY2UuZ2V0QWN0aXZlVmlld09mVHlwZShNYXJrZG93blZpZXcpO1xuXHRcdGlmICghYWN0aXZlVmlldykge1xuXHRcdFx0bmV3IE5vdGljZSgnTm8gYWN0aXZlIG1hcmtkb3duIHZpZXcgZm91bmQnKTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRjb25zdCBlZGl0b3IgPSBhY3RpdmVWaWV3LmVkaXRvcjtcblx0XHRjb25zdCBjb250ZW50ID0gZWRpdG9yLmdldFZhbHVlKCk7XG5cdFx0Y29uc3QgY29tcGlsZWRDb250ZW50ID0gYXdhaXQgdGhpcy5yZXBsYWNlTGlua3MoY29udGVudCk7XG5cdFx0ZWRpdG9yLnNldFZhbHVlKGNvbXBpbGVkQ29udGVudCk7XG5cdH1cblxuXHRhc3luYyByZXBsYWNlTGlua3MoY29udGVudDogc3RyaW5nKTogUHJvbWlzZTxzdHJpbmc+IHtcblx0XHRjb25zdCBsaW5rUGF0dGVybiA9IC8hXFxbXFxbKFteXFxdXSspXFxdXFxdL2c7XG5cdFx0bGV0IG1hdGNoOiBSZWdFeHBFeGVjQXJyYXkgfCBudWxsO1xuXHRcdGxldCByZXN1bHQgPSBjb250ZW50O1xuXG5cdFx0d2hpbGUgKChtYXRjaCA9IGxpbmtQYXR0ZXJuLmV4ZWMoY29udGVudCkpICE9PSBudWxsKSB7XG5cdFx0XHRjb25zdCBsaW5rZWRGaWxlID0gbWF0Y2hbMV07XG5cdFx0XHRjb25zdCBsaW5rZWRGaWxlUGF0aCA9IHRoaXMuYXBwLm1ldGFkYXRhQ2FjaGUuZ2V0Rmlyc3RMaW5rcGF0aERlc3QobGlua2VkRmlsZSwgXCJcIik7XG5cdFx0XHRpZiAobGlua2VkRmlsZVBhdGgpIHtcblx0XHRcdFx0Y29uc3QgZmlsZUNvbnRlbnQgPSBhd2FpdCB0aGlzLmFwcC52YXVsdC5yZWFkKGxpbmtlZEZpbGVQYXRoKTtcblx0XHRcdFx0Y29uc3QgY29tcGlsZWRDb250ZW50ID0gYXdhaXQgdGhpcy5yZXBsYWNlTGlua3MoZmlsZUNvbnRlbnQpOyAvLyBSZWN1cnNpdmUgcmVwbGFjZW1lbnRcblx0XHRcdFx0cmVzdWx0ID0gcmVzdWx0LnJlcGxhY2UobWF0Y2hbMF0sIGNvbXBpbGVkQ29udGVudCk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdHJldHVybiByZXN1bHQ7XG5cdH1cbn1cblxuY2xhc3MgVGV4dENvbXBvc2VyU2V0dGluZ1RhYiBleHRlbmRzIFBsdWdpblNldHRpbmdUYWIge1xuXHRwbHVnaW46IFRleHRDb21wb3NlclBsdWdpbjtcblxuXHRjb25zdHJ1Y3RvcihhcHA6IEFwcCwgcGx1Z2luOiBUZXh0Q29tcG9zZXJQbHVnaW4pIHtcblx0XHRzdXBlcihhcHAsIHBsdWdpbik7XG5cdFx0dGhpcy5wbHVnaW4gPSBwbHVnaW47XG5cdH1cblxuXHRkaXNwbGF5KCk6IHZvaWQge1xuXHRcdGNvbnN0IHsgY29udGFpbmVyRWwgfSA9IHRoaXM7XG5cdFx0Y29udGFpbmVyRWwuZW1wdHkoKTtcblxuXHRcdGNvbnRhaW5lckVsLmNyZWF0ZUVsKCdoMicsIHsgdGV4dDogJ1RleHQgQ29tcG9zZXIgU2V0dGluZ3MnIH0pO1xuXG5cdFx0bmV3IFNldHRpbmcoY29udGFpbmVyRWwpXG5cdFx0XHQuc2V0TmFtZSgnRGVmYXVsdCBTZXR0aW5nJylcblx0XHRcdC5zZXREZXNjKCdBIGRlZmF1bHQgc2V0dGluZyBmb3IgdGhlIHBsdWdpbicpXG5cdFx0XHQuYWRkVGV4dCh0ZXh0ID0+IHRleHRcblx0XHRcdFx0LnNldFBsYWNlaG9sZGVyKCdFbnRlciB5b3VyIHNldHRpbmcnKVxuXHRcdFx0XHQuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuZGVmYXVsdFNldHRpbmcpXG5cdFx0XHRcdC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcblx0XHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5kZWZhdWx0U2V0dGluZyA9IHZhbHVlO1xuXHRcdFx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuXHRcdFx0XHR9KSk7XG5cdH1cbn1cbiJdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxzQkFBcUU7QUFNckUsSUFBTSxtQkFBeUM7QUFBQSxFQUM5QyxnQkFBZ0I7QUFDakI7QUFFQSxJQUFxQixxQkFBckIsY0FBZ0QsdUJBQU87QUFBQSxFQUd0RCxNQUFNLFNBQVM7QUFDZCxVQUFNLEtBQUssYUFBYTtBQUd4QixTQUFLLFdBQVc7QUFBQSxNQUNmLElBQUk7QUFBQSxNQUNKLE1BQU07QUFBQSxNQUNOLFVBQVUsTUFBTSxLQUFLLGdCQUFnQjtBQUFBLElBQ3RDLENBQUM7QUFHRCxTQUFLLGNBQWMsSUFBSSx1QkFBdUIsS0FBSyxLQUFLLElBQUksQ0FBQztBQUFBLEVBQzlEO0FBQUEsRUFFQSxXQUFXO0FBQUEsRUFBQztBQUFBLEVBRVosTUFBTSxlQUFlO0FBQ3BCLFNBQUssV0FBVyxPQUFPLE9BQU8sQ0FBQyxHQUFHLGtCQUFrQixNQUFNLEtBQUssU0FBUyxDQUFDO0FBQUEsRUFDMUU7QUFBQSxFQUVBLE1BQU0sZUFBZTtBQUNwQixVQUFNLEtBQUssU0FBUyxLQUFLLFFBQVE7QUFBQSxFQUNsQztBQUFBLEVBRUEsTUFBTSxrQkFBa0I7QUFDdkIsVUFBTSxhQUFhLEtBQUssSUFBSSxVQUFVLG9CQUFvQiw0QkFBWTtBQUN0RSxRQUFJLENBQUMsWUFBWTtBQUNoQixVQUFJLE9BQU8sK0JBQStCO0FBQzFDO0FBQUEsSUFDRDtBQUVBLFVBQU0sU0FBUyxXQUFXO0FBQzFCLFVBQU0sVUFBVSxPQUFPLFNBQVM7QUFDaEMsVUFBTSxrQkFBa0IsTUFBTSxLQUFLLGFBQWEsT0FBTztBQUN2RCxXQUFPLFNBQVMsZUFBZTtBQUFBLEVBQ2hDO0FBQUEsRUFFQSxNQUFNLGFBQWEsU0FBa0M7QUFDcEQsVUFBTSxjQUFjO0FBQ3BCLFFBQUk7QUFDSixRQUFJLFNBQVM7QUFFYixZQUFRLFFBQVEsWUFBWSxLQUFLLE9BQU8sT0FBTyxNQUFNO0FBQ3BELFlBQU0sYUFBYSxNQUFNLENBQUM7QUFDMUIsWUFBTSxpQkFBaUIsS0FBSyxJQUFJLGNBQWMscUJBQXFCLFlBQVksRUFBRTtBQUNqRixVQUFJLGdCQUFnQjtBQUNuQixjQUFNLGNBQWMsTUFBTSxLQUFLLElBQUksTUFBTSxLQUFLLGNBQWM7QUFDNUQsY0FBTSxrQkFBa0IsTUFBTSxLQUFLLGFBQWEsV0FBVztBQUMzRCxpQkFBUyxPQUFPLFFBQVEsTUFBTSxDQUFDLEdBQUcsZUFBZTtBQUFBLE1BQ2xEO0FBQUEsSUFDRDtBQUNBLFdBQU87QUFBQSxFQUNSO0FBQ0Q7QUFFQSxJQUFNLHlCQUFOLGNBQXFDLGlDQUFpQjtBQUFBLEVBR3JELFlBQVksS0FBVSxRQUE0QjtBQUNqRCxVQUFNLEtBQUssTUFBTTtBQUNqQixTQUFLLFNBQVM7QUFBQSxFQUNmO0FBQUEsRUFFQSxVQUFnQjtBQUNmLFVBQU0sRUFBRSxZQUFZLElBQUk7QUFDeEIsZ0JBQVksTUFBTTtBQUVsQixnQkFBWSxTQUFTLE1BQU0sRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBRTdELFFBQUksd0JBQVEsV0FBVyxFQUNyQixRQUFRLGlCQUFpQixFQUN6QixRQUFRLGtDQUFrQyxFQUMxQyxRQUFRLFVBQVEsS0FDZixlQUFlLG9CQUFvQixFQUNuQyxTQUFTLEtBQUssT0FBTyxTQUFTLGNBQWMsRUFDNUMsU0FBUyxPQUFPLFVBQVU7QUFDMUIsV0FBSyxPQUFPLFNBQVMsaUJBQWlCO0FBQ3RDLFlBQU0sS0FBSyxPQUFPLGFBQWE7QUFBQSxJQUNoQyxDQUFDLENBQUM7QUFBQSxFQUNMO0FBQ0Q7IiwKICAibmFtZXMiOiBbXQp9Cg==
