{
  "version": 3,
  "sources": ["../main.ts", "../options.ts"],
  "sourcesContent": ["import { App, Editor, MarkdownView, Modal, Notice, Plugin, TFile } from 'obsidian';\nimport { TextComposerSettings, DEFAULT_SETTINGS, CompilationMode, TextComposerSettingTab } from './options';\n\nexport default class TextComposerPlugin extends Plugin {\n\tsettings: TextComposerSettings;\n\n\tasync onload() {\n\t\tawait this.loadSettings();\n\n\t\t// Add commands for different compilation modes\n\t\tthis.addCommand({\n\t\t\tid: 'compile-md-document-default',\n\t\t\tname: 'Compile Document (Default Location)',\n\t\t\tcallback: () => this.compileDocument(CompilationMode.DEFAULT_DIRECTORY)\n\t\t});\n\n\t\tthis.addCommand({\n\t\t\tid: 'compile-md-document-same',\n\t\t\tname: 'Compile Document (Same Directory)',\n\t\t\tcallback: () => this.compileDocument(CompilationMode.SAME_DIRECTORY)\n\t\t});\n\n\t\tthis.addCommand({\n\t\t\tid: 'compile-md-document-custom',\n\t\t\tname: 'Compile Document (Choose Directory)',\n\t\t\tcallback: () => this.compileDocument(CompilationMode.CUSTOM_DIRECTORY)\n\t\t});\n\n\t\t// Legacy command - uses default compilation mode\n\t\tthis.addCommand({\n\t\t\tid: 'compile-md-document',\n\t\t\tname: 'Compile Document',\n\t\t\tcallback: () => this.compileDocument(this.settings.defaultCompilationMode)\n\t\t});\n\n\t\tthis.addSettingTab(new TextComposerSettingTab(this.app, this));\n\t}\n\n\tonunload() {\n\t}\n\n\tasync loadSettings() {\n\t\tthis.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());\n\t}\n\n\tasync saveSettings() {\n\t\tawait this.saveData(this.settings);\n\t}\n\n\tprivate async getTargetDirectory(mode: CompilationMode, sourceFile: TFile): Promise<string> {\n\t\tswitch (mode) {\n\t\t\tcase CompilationMode.DEFAULT_DIRECTORY:\n\t\t\t\treturn this.settings.exportDirectory;\n\t\t\tcase CompilationMode.SAME_DIRECTORY:\n\t\t\t\treturn sourceFile.parent?.path || '/';\n\t\t\tcase CompilationMode.CUSTOM_DIRECTORY:\n\t\t\t\t// Show folder selection dialog\n\t\t\t\tconst picker = new FolderSelectionModal(this.app);\n\t\t\t\tconst selectedPath = await picker.waitForClose();\n\t\t\t\tif (!selectedPath) {\n\t\t\t\t\tthrow new Error('No directory selected');\n\t\t\t\t}\n\t\t\t\treturn selectedPath;\n\t\t\tdefault:\n\t\t\t\treturn this.settings.exportDirectory;\n\t\t}\n\t}\n\n\tasync compileDocument(mode: CompilationMode = CompilationMode.DEFAULT_DIRECTORY) {\n\t\tconst activeView = this.app.workspace.getActiveViewOfType(MarkdownView);\n\t\tif (!activeView) {\n\t\t\tnew Notice('No active markdown view found');\n\t\t\treturn;\n\t\t}\n\n\t\tconst editor = activeView.editor;\n\t\tconst content = editor.getValue();\n\t\t\n\t\tif (this.settings.verboseMode) {\n\t\t\tnew Notice(`Starting compilation of: ${activeView.file?.basename}`);\n\t\t}\n\t\t\n\t\tconst compiledContent = await this.replaceLinks(content);\n\n\t\tconst currentFile = activeView.file;\n\t\tif (currentFile) {\n\t\t\ttry {\n\t\t\t\tconst targetDirectory = await this.getTargetDirectory(mode, currentFile);\n\t\t\t\tconst newFileName = currentFile.basename + this.settings.appendName + '.md';\n\t\t\t\tconst newFilePath = targetDirectory + '/' + newFileName;\n\n\t\t\t\tif (this.settings.verboseMode) {\n\t\t\t\t\tnew Notice(`Export location: ${targetDirectory}`);\n\t\t\t\t\tnew Notice(`Output filename: ${newFileName}`);\n\t\t\t\t}\n\n\t\t\t\t// Create target directory if it doesn't exist\n\t\t\t\tif (!(await this.app.vault.adapter.exists(targetDirectory))) {\n\t\t\t\t\tawait this.app.vault.createFolder(targetDirectory);\n\t\t\t\t\tif (this.settings.verboseMode) {\n\t\t\t\t\t\tnew Notice(`Created export directory: ${targetDirectory}`);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Check if file exists\n\t\t\t\tconst fileExists = await this.app.vault.adapter.exists(newFilePath);\n\t\t\t\tlet compiledFile: TFile;\n\n\t\t\t\tif (fileExists) {\n\t\t\t\t\tif (this.settings.verboseMode) {\n\t\t\t\t\t\tnew Notice(`Found existing file at: ${newFilePath}`);\n\t\t\t\t\t\tnew Notice('Overwriting existing file...');\n\t\t\t\t\t}\n\t\t\t\t\tawait this.app.vault.adapter.remove(newFilePath);\n\t\t\t\t\tcompiledFile = await this.app.vault.create(newFilePath, compiledContent);\n\t\t\t\t\tnew Notice(`\u2713 File updated: ${newFileName}`);\n\t\t\t\t} else {\n\t\t\t\t\tif (this.settings.verboseMode) {\n\t\t\t\t\t\tnew Notice(`No existing file found at: ${newFilePath}`);\n\t\t\t\t\t\tnew Notice('Creating new file...');\n\t\t\t\t\t}\n\t\t\t\t\tcompiledFile = await this.app.vault.create(newFilePath, compiledContent);\n\t\t\t\t\tnew Notice(`\u2713 New file created: ${newFileName}`);\n\t\t\t\t}\n\n\t\t\t\t// Open the file in a new tab\n\t\t\t\tconst leaf = this.app.workspace.splitActiveLeaf();\n\t\t\t\tawait leaf.openFile(compiledFile);\n\t\t\t\t\n\t\t\t\tif (this.settings.verboseMode) {\n\t\t\t\t\tnew Notice('\u2713 Compilation completed successfully');\n\t\t\t\t}\n\t\t\t} catch (error) {\n\t\t\t\tconsole.error('Error during file operation:', error);\n\t\t\t\tnew Notice(`\u274C Error: Could not compile document - ${error.message}`);\n\t\t\t}\n\t\t} else {\n\t\t\tnew Notice('No current file found');\n\t\t}\n\t}\n\n\tasync replaceLinks(content: string): Promise<string> {\n\t\tconst linkPattern = /!\\[\\[([^\\]]+)\\]\\]/g;\n\t\tlet match: RegExpExecArray | null;\n\t\tlet result = content;\n\t\tlet linkCount = 0;\n\n\t\twhile ((match = linkPattern.exec(content)) !== null) {\n\t\t\tlinkCount++;\n\t\t\tconst linkedFile = match[1];\n\t\t\tif (this.settings.verboseMode) {\n\t\t\t\tnew Notice(`Processing link ${linkCount}: ${linkedFile}`);\n\t\t\t}\n\t\t\t\n\t\t\tconst linkedFilePath = this.app.metadataCache.getFirstLinkpathDest(linkedFile, \"\");\n\t\t\tif (linkedFilePath) {\n\t\t\t\tif (!linkedFilePath.path.toLowerCase().endsWith(\".md\")) {\n\t\t\t\t\tif (this.settings.verboseMode) {\n\t\t\t\t\t\tnew Notice(`\u26A0\uFE0F Skipping non-markdown file: ${linkedFile}`);\n\t\t\t\t\t}\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (this.settings.verboseMode) {\n\t\t\t\t\tnew Notice(`\u2192 Including content from: ${linkedFile}`);\n\t\t\t\t}\n\t\t\t\tconst fileContent = await this.app.vault.read(linkedFilePath);\n\t\t\t\tconst compiledContent = await this.replaceLinks(fileContent);\n\t\t\t\tresult = result.replace(match[0], compiledContent);\n\t\t\t} else if (this.settings.verboseMode) {\n\t\t\t\tnew Notice(`\u26A0\uFE0F Warning: Could not resolve link ${linkedFile}`);\n\t\t\t}\n\t\t}\n\n\t\tif (this.settings.verboseMode && linkCount > 0) {\n\t\t\tnew Notice(`\u2713 Processed ${linkCount} links`);\n\t\t}\n\n\t\treturn result;\n\t}\n}\n\nclass FolderSelectionModal extends Modal {\n\tprivate resolvePromise: ((value: string | null) => void) | null = null;\n\tprivate selectedPath: string | null = null;\n\n\tconstructor(app: App) {\n\t\tsuper(app);\n\t}\n\n\tonOpen() {\n\t\tconst { contentEl } = this;\n\t\tcontentEl.empty();\n\t\t\n\t\tcontentEl.createEl('h2', { text: 'Select Target Directory' });\n\t\t\n\t\tconst folderList = contentEl.createDiv('folder-list');\n\t\t\n\t\t// Get all folders in the vault\n\t\tconst folders = this.getAllFolders();\n\t\tfolders.forEach(folder => {\n\t\t\tconst folderEl = folderList.createDiv('folder-item');\n\t\t\tfolderEl.setText(folder);\n\t\t\tfolderEl.addEventListener('click', () => {\n\t\t\t\tthis.selectedPath = folder;\n\t\t\t\tthis.close();\n\t\t\t});\n\t\t});\n\n\t\t// Add cancel button\n\t\tconst cancelButton = contentEl.createEl('button', { text: 'Cancel' });\n\t\tcancelButton.addEventListener('click', () => {\n\t\t\tthis.selectedPath = null;\n\t\t\tthis.close();\n\t\t});\n\t}\n\n\tonClose() {\n\t\tconst { contentEl } = this;\n\t\tcontentEl.empty();\n\t\tif (this.resolvePromise) {\n\t\t\tthis.resolvePromise(this.selectedPath);\n\t\t}\n\t}\n\n\twaitForClose(): Promise<string | null> {\n\t\treturn new Promise((resolve) => {\n\t\t\tthis.resolvePromise = resolve;\n\t\t\tthis.open();\n\t\t});\n\t}\n\n\tprivate getAllFolders(): string[] {\n\t\tconst folders: string[] = ['/'];\n\t\tthis.app.vault.getAllLoadedFiles().forEach(file => {\n\t\t\tif (file.parent) {\n\t\t\t\tconst path = file.parent.path;\n\t\t\t\tif (!folders.includes(path)) {\n\t\t\t\t\tfolders.push(path);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\treturn folders.sort();\n\t}\n}\n\n", "import { App, PluginSettingTab, Setting } from 'obsidian';\nimport TextComposerPlugin from './main';\n\nexport enum CompilationMode {\n\tDEFAULT_DIRECTORY = 'default_directory',\n\tSAME_DIRECTORY = 'same_directory',\n\tCUSTOM_DIRECTORY = 'custom_directory'\n}\n\nexport interface TextComposerSettings {\n\texportDirectory: string;\n\tappendName: string;\n\tshortcut: string;\n\tverboseMode: boolean;\n\tdefaultCompilationMode: CompilationMode;\n}\n\nexport const DEFAULT_SETTINGS: TextComposerSettings = {\n\texportDirectory: '/',\n\tappendName: '_compiled',\n\tshortcut: 'Ctrl+Shift+C',\n\tverboseMode: false,\n\tdefaultCompilationMode: CompilationMode.DEFAULT_DIRECTORY,\n}\n\nexport class TextComposerSettingTab extends PluginSettingTab {\n\tplugin: TextComposerPlugin;\n\n\tconstructor(app: App, plugin: TextComposerPlugin) {\n\t\tsuper(app, plugin);\n\t\tthis.plugin = plugin;\n\t}\n\n\tdisplay(): void {\n\t\tconst { containerEl } = this;\n\t\tcontainerEl.empty();\n\n\t\tcontainerEl.createEl('h2', { text: 'Text Composer Settings' });\n\n\t\tnew Setting(containerEl)\n\t\t\t.setName('Default Compilation Mode')\n\t\t\t.setDesc('Choose the default behavior for document compilation')\n\t\t\t.addDropdown(dropdown => dropdown\n\t\t\t\t.addOption(CompilationMode.DEFAULT_DIRECTORY, 'Use Export Directory')\n\t\t\t\t.addOption(CompilationMode.SAME_DIRECTORY, 'Same as Source')\n\t\t\t\t.addOption(CompilationMode.CUSTOM_DIRECTORY, 'Custom Directory')\n\t\t\t\t.setValue(this.plugin.settings.defaultCompilationMode)\n\t\t\t\t.onChange(async (value: CompilationMode) => {\n\t\t\t\t\tthis.plugin.settings.defaultCompilationMode = value;\n\t\t\t\t\tawait this.plugin.saveSettings();\n\t\t\t\t}));\n\n\t\tnew Setting(containerEl)\n\t\t\t.setName('Export Directory')\n\t\t\t.setDesc('Set the directory where the compiled file will be exported when using Default Directory mode')\n\t\t\t.addText(text => text\n\t\t\t\t.setPlaceholder('Enter export directory')\n\t\t\t\t.setValue(this.plugin.settings.exportDirectory)\n\t\t\t\t.onChange(async (value) => {\n\t\t\t\t\tthis.plugin.settings.exportDirectory = value;\n\t\t\t\t\tawait this.plugin.saveSettings();\n\t\t\t\t}));\n\n\t\tnew Setting(containerEl)\n\t\t\t.setName('Append Name')\n\t\t\t.setDesc('Set the name to append to the compiled file')\n\t\t\t.addText(text => text\n\t\t\t\t.setPlaceholder('Enter append name')\n\t\t\t\t.setValue(this.plugin.settings.appendName)\n\t\t\t\t.onChange(async (value) => {\n\t\t\t\t\tthis.plugin.settings.appendName = value;\n\t\t\t\t\tawait this.plugin.saveSettings();\n\t\t\t\t}));\n\n\t\tnew Setting(containerEl)\n\t\t\t.setName('Shortcut')\n\t\t\t.setDesc('Set the shortcut to run the plugin')\n\t\t\t.addText(text => text\n\t\t\t\t.setPlaceholder('Enter shortcut')\n\t\t\t\t.setValue(this.plugin.settings.shortcut)\n\t\t\t\t.onChange(async (value) => {\n\t\t\t\t\tthis.plugin.settings.shortcut = value;\n\t\t\t\t\tawait this.plugin.saveSettings();\n\t\t\t\t}));\n\n\t\tnew Setting(containerEl)\n\t\t\t.setName('Verbose Mode')\n\t\t\t.setDesc('Show detailed information during compilation')\n\t\t\t.addToggle(toggle => toggle\n\t\t\t\t.setValue(this.plugin.settings.verboseMode)\n\t\t\t\t.onChange(async (value) => {\n\t\t\t\t\tthis.plugin.settings.verboseMode = value;\n\t\t\t\t\tawait this.plugin.saveSettings();\n\t\t\t\t}));\n\t}\n}\n"],
  "mappings": "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",
  "names": ["import_obsidian"]
}
